// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique @db.Text
  username           String?              @db.VarChar(255)
  password           String               @db.Text
  icon               String               @default("default_icon.png") @db.Text
  credits            Int                  @default(0) @db.Integer
  calories           Int                  @default(0) @db.Integer
  created_at         DateTime             @default(now()) @db.Timestamptz
  updated_at         DateTime             @updatedAt @db.Timestamptz
  FavouriteFoods     FavouriteFoods[]
  FavouriteCourse    FavouriteCourse[]
  FoodCart           FoodCart[]
  FoodHistory        FoodHistory[]
  UserSchedule       UserSchedule[]
  CalorieTransaction CalorieTransaction[]
  CreditTransaction CreditTransaction[]
}

model FoodTypes {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.Text
  icon       String   @db.Text
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  foods      Foods[]
}

model Foods {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.Text
  food_types     FoodTypes        @relation(fields: [food_type_id], references: [id])
  food_type_id   Int              @db.Integer
  image          String           @db.Text
  calories       Int              @db.Integer
  description    String           @db.Text
  ingredients    Json             @db.Json
  allergens      String[]
  created_at     DateTime         @default(now()) @db.Timestamptz
  updated_at     DateTime         @updatedAt @db.Timestamptz
  FavouriteFoods FavouriteFoods[]
  FoodCart       FoodCart[]
  FoodHistory    FoodHistory[]
}

model FoodHistory {
  id                 Int                  @id @default(autoincrement())
  gym_id             Int                  @db.Integer
  gym                Gyms                 @relation(fields: [gym_id], references: [id])
  user_id            Int                  @db.Integer
  user               Users                @relation(fields: [user_id], references: [id])
  food_id            Int                  @db.Integer
  food               Foods                @relation(fields: [food_id], references: [id])
  collection_status  String               @db.Text
  created_at         DateTime             @default(now()) @db.Timestamptz
  updated_at         DateTime             @updatedAt @db.Timestamptz
  CalorieTransaction CalorieTransaction[]
}

model Districts {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  gyms       Gyms[]

  @@map("Districts")
}

model Franchise {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  email      String   @db.Text
  telephone  String   @db.Text
  Gyms       Gyms[]
}

model Gyms {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(255)
  username        String        @unique @db.VarChar(255)
  password        String        @db.Text
  franchise       Franchise     @relation(fields: [franchise_id], references: [id])
  franchise_id    Int           @db.Integer
  district        Districts     @relation(fields: [district_id], references: [id])
  district_id     Int           @db.Integer
  opening_hour    Int           @db.Integer
  closing_hour    Int           @db.Integer
  no_close        Boolean       @db.Boolean
  address         String        @db.Text
  google_position Json          @db.Json
  created_at      DateTime      @default(now()) @db.Timestamptz
  updated_at      DateTime      @updatedAt @db.Timestamptz
  FoodHistory     FoodHistory[]
}

model Trainers {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(255)
  icon             String            @db.Text
  certifications   String            @db.Text
  franchise_id     Int               @db.Integer
  created_at       DateTime          @default(now()) @db.Timestamptz
  updated_at       DateTime          @updatedAt @db.Timestamptz
  courses          Courses[]
  course_schedules CourseSchedules[]
}

model Intensities {
  id         Int       @id @default(autoincrement())
  level      String    @unique @db.Text
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  coruses    Courses[]
}

model CourseTypes {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.Text
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  coruses    Courses[]
}

model Courses {
  id                 Int         @id @default(autoincrement())
  intensity_id       Int         @db.Integer
  course_type_id     Int         @db.Integer
  gym_id             Int         @db.Integer
  name               String      @unique @db.Text
  credits            Int         @db.Integer
  intensity          Intensities @relation(fields: [intensity_id], references: [id])
  course_type        CourseTypes @relation(fields: [course_type_id], references: [id])
  calorise           Int         @db.Integer
  duration           Int         @db.Integer
  default_quota      Int         @db.Integer
  default_trainer_id Int         @db.Integer
  trainers           Trainers    @relation(fields: [default_trainer_id], references: [id])
  created_at         DateTime    @default(now()) @db.Timestamptz
  updated_at         DateTime    @updatedAt @db.Timestamptz
  courseSchedules CourseSchedules[]
}

model CourseSchedules {
  id         Int      @id @default(autoincrement())
  course_id  Int      @db.Integer
  courses Courses @relation(fields: [course_id],references: [id])
  trainer_id Int      @db.Integer
  quota      Int      @db.Integer
  trainers   Trainers @relation(fields: [trainer_id], references: [id])
  time       DateTime @db.Timestamptz
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
}

model FavouriteCourse {
  id         Int      @id @default(autoincrement())
  user_id    Int      @db.Integer
  user       Users    @relation(fields: [user_id], references: [id])
  course_id  Int      @db.Integer
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
}

model CreditTransactionType {
  id                Int                 @id @default(autoincrement())
  name              String              @db.Text
  created_at        DateTime            @default(now()) @db.Timestamptz
  updated_at        DateTime            @updatedAt @db.Timestamptz
  creditTransaction CreditTransaction[]
}

model CreditTransaction {
  id                         Int                   @id @default(autoincrement())
  user_id Int @db.Integer
  user Users @relation(fields: [user_id], references: [id])
  user_schedule_id           Int                   @db.Integer
  user_schedule              UserSchedule          @relation(fields: [user_schedule_id], references: [id])
  credit                     Int                   @db.Integer
  details                    String                @db.Text
  credit_transaction_type    CreditTransactionType @relation(fields: [credit_transaction_type_id], references: [id])
  credit_transaction_type_id Int                   @db.Integer
  created_at                 DateTime              @default(now()) @db.Timestamptz
  updated_at                 DateTime              @updatedAt @db.Timestamptz
}

model AttendanceTypes {
  id            Int            @id @default(autoincrement())
  details       String         @db.Text
  user_schedule UserSchedule[]
}

model UserSchedule {
  id                 Int                 @id @default(autoincrement())
  user_id            Int                 @db.Integer
  user               Users               @relation(fields: [user_id], references: [id])
  course_schedule_id Int                 @db.Integer
  attendance_type_id Int                 @db.Integer
  attendance_type    AttendanceTypes     @relation(fields: [attendance_type_id], references: [id])
  created_at         DateTime            @default(now()) @db.Timestamptz
  updated_at         DateTime            @updatedAt @db.Timestamptz
  creditTransaction  CreditTransaction[]
}

model SubPlans {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.Text
  unlimited  Boolean  @db.Boolean
  credits    Int      @db.Integer
  fee        Int      @db.Integer
  duration   Int      @db.Integer
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
}

model CalorieTransactionType {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.Text
  created_at         DateTime             @default(now()) @db.Timestamptz
  updated_at         DateTime             @updatedAt @db.Timestamptz
  calorieTransaction CalorieTransaction[]
}

model CalorieTransaction {
  id                  Int                    @id @default(autoincrement())
  user_id             Int                    @db.Integer
  user                Users                  @relation(fields: [user_id], references: [id])
  food_history_id     Int                    @db.Integer
  food_history        FoodHistory            @relation(fields: [food_history_id], references: [id])
  calorie             Int                    @db.Integer
  transaction_type_id Int                    @db.Integer
  transaction_type    CalorieTransactionType @relation(fields: [transaction_type_id], references: [id])
  details             String                 @db.Text
  created_at          DateTime               @default(now()) @db.Timestamptz
  updated_at          DateTime               @updatedAt @db.Timestamptz
}

model FavouriteFoods {
  id         Int      @id @default(autoincrement())
  user_id    Int      @db.Integer
  users      Users    @relation(fields: [user_id], references: [id])
  food_id    Int      @db.Integer
  foods      Foods    @relation(fields: [food_id], references: [id])
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
}

model FoodCart {
  id         Int      @id @default(autoincrement())
  user_id    Int      @db.Integer
  users      Users    @relation(fields: [user_id], references: [id])
  food_id    Int      @db.Integer
  foods      Foods    @relation(fields: [food_id], references: [id])
  quantity   Int      @db.Integer
  updated_at DateTime @updatedAt @db.Timestamptz
  created_at DateTime @default(now()) @db.Timestamptz
}
